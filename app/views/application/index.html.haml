= content_for :header do
  Bees Harvest

-#= @group_by_pollen
-#= @group_by_day
%p
  The most effective pollen is:
  = @group_by_pollen.max_by{|k,v| v['sugar']}
%p
  The most popular pollen is:
  = @group_by_pollen.max_by{|k,v| v['count']}
%p
  The best day for harvest:
  = @group_by_day.max_by{|k,v| v}
%p
  The worst day for harvest:
  = @group_by_day.min_by{|k,v| v}
%p
  - total_days = @group_by_day.length
  Total working days:
  = total_days
%p
  The best bee:
  = @group_by_bees.max_by{|k,v| v}
%p
  The worst bee:
  = @group_by_bees.min_by{|k,v| v}

#graph

:javascript

  $(document).ready(function(){
    var margin = {top: 30, right: 20, bottom: 30, left: 70},
        width = 600 - margin.left - margin.right,
        height = 270 - margin.top - margin.bottom;

    var parseDate = d3.time.format("%Y-%m-%d").parse;

    var x = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);

    var xAxis = d3.svg.axis().scale(x)
      .orient("bottom").ticks(5);

    var yAxis = d3.svg.axis().scale(y)
      .orient("left").ticks(5);

    var valueline = d3.svg.line()
      .x(function(d) { return x(d.date); })
      .y(function(d) { return y(d.sugar); });

    var svg = d3.select("#graph")
      .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    var group_by_day = JSON.parse('#{@group_by_day.to_json}');
    var data = [];
    for(var key in group_by_day){
      data.push({ "date": parseDate(key), "sugar": group_by_day[key] });
    }
    data.sort(function(a,b){ return a.date - b.date ;});

    // Scale the range of the data
    x.domain(d3.extent(data, function(d) { return d.date; }));
    y.domain([0, d3.max(data, function(d) { return d.sugar; })]);

    svg.append("path")      // Add the valueline path.
      .attr("d", valueline(data));

    // Add the text label for the X axis
    svg.append("text")
        .attr("transform", "translate(" + (width / 2) + " ," + (height + margin.bottom) + ")")
        .style("text-anchor", "middle")
        .text("Date");

    svg.append("g")         // Add the X Axis
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    // Add the text label for the Y axis
    svg.append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 0 - margin.left)
        .attr("x",0 - (height / 2))
        .attr("dy", "1em")
        .style("text-anchor", "middle")
        .text("Sugar");

    svg.append("g")         // Add the Y Axis
      .attr("class", "y axis")
      .call(yAxis);

    // to find nearest date to current mouse position
    var bisectDate = d3.bisector(function(d){ return d.date;}).left;

    // create interactive focus
    var focus = svg.append("g")
                   .attr("class", "focus")
                   .style("display", "none");

    // add two circles to focus point
    focus.append("circle")
         .attr("r", 5.5);
    focus.append("circle")
         .attr("r", 2)
         .style("fill", "steelBlue");

    // rectangle to detect mouse events and focus visibility
    var rect = svg.append("rect")
                  .attr("class", "overlay")
                  .attr("width", width)
                  .attr("height", height)
                  .on("mouseover", function(){ focus.style("display", null); })
                  .on("mouseout", function(){ focus.style("display", "none"); $(this).parent().find(".focus").tooltip('hide'); })
                  .on("mousemove", mousemove);

    function mousemove() {
      var x0 = x.invert(d3.mouse(this)[0]),
          i = bisectDate(data, x0, 1),
          d0 = data[i - 1],
          d1 = data[i],
          d = x0 - d0.year > d1.year - x0 ? d1 : d0;
      focus.attr("transform", "translate(" + x(d.date) + "," + y(d.sugar) + ")");
      var el = $(this).parent().find(".focus");
      el.tooltip({
          'container': 'body',
          'placement': 'top',
          'trigger': 'manual'
      });
      el.attr('data-original-title', "day: " + d.date.getDay() + "; sugar: " + parseFloat(d.sugar).toFixed(2) )
        .tooltip('fixTitle')
        .tooltip('show');
    }

  })